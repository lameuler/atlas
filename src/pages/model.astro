---
import { type GetStaticPaths } from 'astro'
import PageLayout from '../components/PageLayout.astro'
import { isContainer, isEntry } from '../model/model.js'
import NamedMember from '../model/components/NamedMember.astro'
import MemberList from '../model/components/MemberList.astro'
import { getNextPage, getPageGroup, getPreviousPage } from '../sidebar'
import DeclarationSection from '../model/components/DeclarationSection.astro'
import ExportsList from '../model/components/ExportsList.astro'
import DocsBlockSection from '../model/components/DocsBlockSection.astro'

export const getStaticPaths = (async () => {
    return (
        globalThis.atlasReference?.pages.map(({ id, href, named }) => ({
            params: {
                id: id || undefined,
            },
            props: {
                named,
                href,
            },
        })) ?? []
    )
}) satisfies GetStaticPaths

const { named, href } = Astro.props

const group = getPageGroup(href)
const prev = getPreviousPage(href)
const next = getNextPage(href)

let description = ''
if (isEntry(named) && named.docs?.isEmpty === false) {
    description = await named.docs.text()
} else {
    for (const { docs } of named.declarations) {
        if (docs.shortSummary?.isEmpty === false) {
            description += ' ' + (await docs.shortSummary.text())
        }
    }
}
description = description.trim()
if (description.length > 155) {
    for (let i = 155; i < description.length; i++) {
        const char = description[i]
        if (
            (char >= 'a' && char <= 'z') ||
            (char >= 'A' && char <= 'Z') ||
            (char >= '0' && char <= '9')
        ) {
            continue
        } else {
            description = description.substring(0, i) + 'â€¦'
            break
        }
    }
}
---

<PageLayout title={named.name} {description} {href} headings={named.headings} {group} {prev} {next}>
    {
        named.release && (
            <span slot="subtitle">
                {named.release.url ? (
                    <a href={named.release.url}>{named.release.name}</a>
                ) : (
                    <>{named.release.name}</>
                )}
            </span>
        )
    }
    {
        isEntry(named) && (
            <>
                {named.docs && <DocsBlockSection block={named.docs} />}
                <ExportsList heading={named.exports.heading} groups={named.groups} />
            </>
        )
    }
    {
        named.declarations.map((dec) => (
            <section>
                <DeclarationSection declaration={dec} source />
                {isContainer(dec) && (
                    <>
                        <NamedMember named={dec.constructors} />
                        <NamedMember named={dec.callSignatures} />
                        <NamedMember named={dec.indexSignatures} />
                        <MemberList list={dec.staticMembers} />
                        <MemberList list={dec.members} />
                    </>
                )}
            </section>
        ))
    }
</PageLayout>

<style>
    span {
        background-color: var(--bg-code);
        padding: 0.2em 0.6em;
        border-radius: 1em;
    }
    span a:hover {
        text-decoration: underline;
        color: var(--accent-highlight);
    }
</style>
