<section>
    <slot />
</section>

<style>
    section {
        position: relative;
        --color: #2e3145;
        --root-color: rgb(var(--text));
        color: var(--color);
        line-height: calc(var(--height) * 1.8);
    }
    :global(.dark) section {
        --color: #cad7e4;
    }
    section :global(strong),
    section :global(b) {
        font-weight: 650;
        color: var(--root-color);
    }
    section :global(a) {
        text-decoration: underline;
        color: var(--accent);
    }
    section :global(a:hover) {
        color: var(--accent-highlight);
    }

    section :global(pre) {
        margin: calc(var(--height) * 1em) -0.4rem;
        line-height: max(var(--height) * 1.5, 1);
    }
    section :global(.astro-code) {
        position: relative;
    }
    section :global(.astro-code),
    section :global(.astro-code span) {
        color: var(--shiki-light);
        background-color: var(--shiki-light-bg);
        font-style: var(--shiki-light-font-style);
        font-weight: var(--shiki-light-font-weight);
        text-decoration: var(--shiki-light-text-decoration);
    }

    :global(.dark) section :global(.astro-code),
    :global(.dark) section :global(.astro-code span) {
        color: var(--shiki-dark);
        background-color: var(--shiki-dark-bg);
        font-style: var(--shiki-dark-font-style);
        font-weight: var(--shiki-dark-font-weight);
        text-decoration: var(--shiki-dark-text-decoration);
    }
    section :global(.astro-code button[data-copy-previous]) {
        position: absolute;
        color: var(--color);
        top: 0;
        right: 0;
        padding: 0.3rem;
        margin: 0.3rem;
        opacity: 0;
        display: block;
        border-radius: 0.4rem;
        background-color: var(--bg-pre);
        border: 1px solid var(--bg-code);
        z-index: 10;
        visibility: hidden;
        transition-property: opacity, visibility;
        transition-duration: 150ms;
        transition-timing-function: ease-in-out;
    }
    section :global(.astro-code:hover button[data-copy-previous]) {
        opacity: 0.5;
        visibility: visible;
    }
    section :global(.astro-code:hover button[data-copy-previous]:hover) {
        opacity: 0.9;
        background-color: var(--bg-code);
        border: 1px solid var(--line);
    }
    section :global(.astro-code button[data-copy-previous] > svg.icon) {
        height: 1.25rem;
        width: 1.25rem;
        display: block;
    }

    section :global(section) {
        margin: calc(var(--height) * 1.5em) 0 0 0;
    }
    section :global(:is(p, blockquote, aside)) {
        margin: calc(var(--height) * 1em) 0;
    }
    section :global(blockquote) {
        padding-inline-start: 1em;
        padding-block: 0.2rem 0.3rem;
        border-inline-start: 3px solid var(--line);
        color: var(--sub);
    }
    section :global(aside) {
        padding-inline-start: 1em;
        padding-block: 0.2rem 0.3rem;
        border-inline-start: 3px solid var(--aside);
    }
    section :global(aside > .title) {
        font-weight: 500;
        display: flex;
        gap: 0.4em;
        align-items: center;
        overflow-wrap: anywhere;
        --root-color: var(--aside);
        color: var(--root-color);
        line-height: calc(var(--height) * 1.5);
    }
    section :global(aside > .title > svg.icon) {
        width: 1.25em;
        height: 1.25em;
        flex-shrink: 0;
    }
    section :global(aside > :nth-child(2)) {
        margin-top: 0.5em;
    }
    section :global(blockquote > :first-child) {
        margin-top: 0;
    }
    section :global(blockquote > :last-child),
    section :global(aside > :last-child) {
        margin-bottom: 0;
    }
    section :global(aside.note) {
        --aside: #2563eb;
    }
    :global(.dark) section :global(aside.note) {
        --aside: #3b82f6;
    }
    section :global(aside.tip) {
        --aside: #16a34a;
    }
    :global(.dark) section :global(aside.tip) {
        --aside: #22c55e;
    }
    section :global(aside.important) {
        --aside: #9333ea;
    }
    :global(.dark) section :global(aside.important) {
        --aside: #a855f7;
    }
    section :global(aside.warning) {
        --aside: #d97706;
    }
    :global(.dark) section :global(aside.warning) {
        --aside: #f59e0b;
    }
    section :global(aside.caution) {
        --aside: #dc2626;
    }
    :global(.dark) section :global(aside.caution) {
        --aside: #ef4444;
    }

    section :global(figure) {
        margin: calc(var(--height) * 2em) 0;
    }
    section :global(figcaption) {
        font-size: 0.95em;
        line-height: 1.6;
        color: var(--sub);
        margin-top: calc(var(--height) * 0.5em);
    }
    section :global(img) {
        max-width: 100%;
    }
    section :global(hr) {
        border: none;
        border-block-start: 1px solid var(--line);
        margin: calc(var(--height) * 0.5em) auto;
    }
    section :global(kbd) {
        font-size: 0.9em;
        border-radius: 0.4em;
        padding: 0.25em 0.35em;
        color: var(--root-color);
        border: 1px solid var(--line);
        box-shadow: 0 2.5px 0 -1px var(--line);
    }

    section :global(ul) {
        list-style-type: disc;
        padding-inline-start: 1.75em;
    }
    section :global(ol) {
        list-style-type: decimal;
        padding-inline-start: 1.75em;
    }
    section :global(:is(ol, ul) :is(ol, ul)) {
        margin-block: calc(var(--height) * 0.5em) calc(var(--height) * 1em);
    }
    section :global(:is(ul, ol) > li) {
        margin: 0 0 calc(var(--height) * 0.5em) 0;
        padding-inline-start: 0.25em;
    }
    section :global(li::marker) {
        color: var(--sub);
    }
    section :global(:is(ul, ol, dl)) {
        margin: calc(var(--height) * 1em) 0;
    }
    section :global(:is(ul, ol, dl, li) > :first-child) {
        margin-top: 0;
    }
    section :global(:is(ul, ol, dl) > :last-child) {
        margin-bottom: 0;
    }
    section :global(dt) {
        color: var(--root-color);
        font-weight: 600;
        margin-top: calc(var(--height) * 1em);
    }
    section :global(dd) {
        margin-block: calc(var(--height) * 0.5em);
        margin-inline-start: 1.5em;
    }

    section :global(table) {
        border-collapse: collapse;
        max-width: 100%;
        display: block;
        overflow-x: auto;
        margin: calc(var(--height) * 1.5em) 0;
    }
    section :global(:is(th, td)) {
        border: 1px solid var(--line);
        padding: 0.3em 1em;
    }
    section :global(th) {
        font-weight: 600;
        color: var(--root-color);
        text-align: start;
    }
    section
        :global(
            :is(
                thead tr,
                thead + tbody tr:nth-child(even),
                tbody:not(thead + tbody) tr:nth-child(odd)
            )
        ) {
        background-color: var(--bg-pre);
    }

    section :global(pre) {
        background-color: var(--bg-pre) !important;
        padding: 0.8em 1em;
        border-radius: 0.5em;
        border: 1px solid #dae0e7;
        overflow-x: auto;
    }
    :global(.dark) section :global(pre) {
        border: 1px solid #0b0e1b;
    }
    section :global(pre span) {
        background-color: var(--bg-pre) !important;
    }
    section :global(code:not(pre code)) {
        background-color: var(--bg-code);
        padding: 0.1em 0.3em;
        border-radius: 0.4em;
    }

    section :global(:is(h1, h2, h3, h4, h5, h6)) {
        color: var(--root-color);
    }
    section :global(h1) {
        font-size: 2.25em;
    }
    section :global(h2) {
        font-size: 1.75em;
        font-weight: 600;
    }
    section :global(h3) {
        font-size: 1.5em;
        font-weight: 600;
    }
    section :global(h4) {
        font-size: 1.25em;
        font-weight: 550;
    }
    section :global(h5) {
        font-size: 1em;
        font-weight: 650;
    }
    section :global(h6) {
        font-size: 1em;
        font-weight: 500;
        color: #6f7695;
    }
    section :global(:is(h1, h2, h3)) {
        margin-block: calc(var(--height) * 2em) calc(var(--height) * 1em);
    }
    section :global(h4) {
        margin-block: calc(var(--height) * 1.5em) calc(var(--height) * 1em);
    }
    section :global(:is(h5, h6)) {
        margin-block: calc(var(--height) * 1.5em) calc(var(--height) * 0.5em);
    }
    section :global(:is(h5, h6) + *) {
        margin-top: 0;
    }
    section :global(:is(h1, h2, h3, h4, h5, h6) + :is(h1, h2, h3, h4, h5, h6)) {
        margin-top: 0;
    }
    :global(.dark) section :global(h6) {
        color: #95abbd;
    }

    section :global(:is(h1, h2, h3, h4, h5, h6) > a:last-child:has(> svg:only-child.icon)) {
        color: var(--line);
    }
    section
        :global(:is(h1, h2, h3, h4, h5, h6):hover > a:last-child:has(> svg:only-child.icon):hover) {
        color: var(--accent-highlight);
    }
    section :global(:is(h1, h2, h3, h4, h5, h6) > a:last-child > svg:only-child.icon) {
        height: 1em;
        width: 1em;
        vertical-align: bottom;
        display: inline-block;
        margin-inline: 0.2em;
        margin-block: calc((var(--height) * 1.8em - 1em) / 2);
    }
</style>

<script>
    for (const button of document.querySelectorAll<HTMLElement>('button[data-copy-previous]')) {
        let saved: string | undefined = undefined
        let timeout: number | NodeJS.Timeout = -1
        button.addEventListener('click', async () => {
            const text = button.previousElementSibling?.textContent
            const html = (saved ??= button.innerHTML)
            if (typeof text !== 'string') return
            try {
                await navigator.clipboard.writeText(text)
                button.innerHTML =
                    '<svg width="20" height="20" viewBox="0 0 24 24" class="icon"><path d="M5 12l5 5l10 -10"/></svg>'
            } catch (e) {
                button.innerHTML =
                    '<svg width="20" height="20" viewBox="0 0 24 24" class="icon"><path d="M3 12a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"/><path d="M18.364 5.636l-12.728 12.728"/></svg>'
            }
            clearTimeout(timeout)
            timeout = setTimeout(() => {
                button.innerHTML = html
                saved = undefined
            }, 500)
        })
    }
</script>
